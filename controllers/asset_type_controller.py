from flask import Blueprint, jsonify, request, abort
from main import db
from models.asset_type import AssetType
from models.users import User
from schemas.asset_type_schema import asset_type_schema, asset_types_schema
from datetime import date
from flask_jwt_extended import jwt_required, get_jwt_identity

asset_type = Blueprint('asset_type', __name__, url_prefix="/asset_type")

# The GET route endpoint - get all the asset_types
@asset_type.route("/", methods=["GET"])
def get_all_asset_types():
    # Get all the asset_types from the database table
    asset_type_list = AssetType.query.all()
    # Convert the asset_types from the database into a JSON format and store them in result
    result = asset_types_schema.dump(asset_type_list)
    # Return the data in JSON format
    return jsonify(result)

# The GET manufacturer routes endpoint - get details on one asset_type
@asset_type.route("/<int:id>/", methods=["GET"])
def get_asset_type(id):
    asset_type = AssetType.query.get(id)
    # Return an error if the asset_type doesn't exist
    if not asset_type:
        return abort(400, description= "Asset_type does not exist")
    # Convert the asset_type from the database into a JSON format and store them in result
    result = asset_type_schema.dump(asset_type)
    # Return the data in JSON format
    return jsonify(result)

# The POST route endpoint - add a asset_type
@asset_type.route("/", methods=["POST"])
@jwt_required ()
def create_asset_type():
    # Create a new asset_type
    asset_fields = asset_type_schema.load(request.json)
    # Get the user id invoking get_jwt_identity
    user_id = get_jwt_identity()
    # Find it in the db
    user = User.query.get(user_id)
    # Make sure it is in the database
    if not user:
        return abort(401, description="Invalid user")
    # Stop the request if the user is not an admin
    if not user.admin:
        return abort(401, description="Unauthorised user")
    new_asset_type = AssetType()
    new_asset_type.description = asset_fields["description"]
    new_asset_type.asset_id = asset_fields["asset_id"]
    # Not taken from the request, generated by the server
    new_asset_type.date = date.today()
    # Add to the database and commit
    db.session.add(new_asset_type)
    db.session.commit()
    # Return the asset_type in the response
    return jsonify(asset_type_schema.dump(new_asset_type))

# The PUT route endpoint - update asset_type
@asset_type.route("/<int:id>/", methods=["PUT"])
@jwt_required()
def update_asset_type(id):
    # Create a new asset_type
    asset_type_fields = asset_type_schema.load(request.json)
    # Get the user id invoking get_jwt_identity
    user_id = get_jwt_identity()
    # Find it in the db
    user = User.query.get(user_id)
    # Make sure it is in the database
    if not user:
        return abort(401, description="Invalid user")
    # Stop the request if the user is not an admin
    if not user.admin:
        return abort(401, description="Unauthorised user")
    # Find the asset_type
    asset_type = AssetType.query.filter_by(asset_type_id=id).first()
    # Return an error if the asset_type doesn't exist
    if not asset_type:
        return abort(400, description= "Asset_type does not exist")
    # Update the asset_type details with the given values
    new_asset_type = AssetType()
    new_asset_type.description = asset_type_fields["description"]
    new_asset_type.asset_id = asset_type_fields["asset_id"]
    new_asset_type.date = date.today()
    # Add to the database and commit
    db.session.add(new_asset_type)
    db.session.commit()
    # Return the asset_type in the response
    return jsonify(asset_type_schema.dump(asset_type))

# The DELETE route endpoint - delete a asset_type
@asset_type.route("/<int:id>/", methods=["DELETE"])
@jwt_required ()
def delete_asset_type(id):
    # Get the user id invoking get_jwt_identity
    user_id = get_jwt_identity()
    # Find it in the db
    user = User.query.get(user_id)
    # Make sure it is in the database
    if not user:
        return abort(401, description="Invalid user")
    # Stop the request if the user is not an admin
    if not user.admin:
        return abort(401, description="Unauthorised user")
    # Find the card
    asset_type = AssetType.query.filter_by(asset_type_id=id).first()
    # Return an error if the asset_type doesn't exist
    if not asset_type:
        return abort(400, description= "Asset_type doesn't exist")
    # Delete the asset_type from the database and commit
    db.session.delete(asset_type)
    db.session.commit()
    # Return the asset_type in the response
    return jsonify(asset_type_schema.dump(asset_type))
   