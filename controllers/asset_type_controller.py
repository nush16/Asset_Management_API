from flask import Blueprint, jsonify, request, abort
from main import db
from models.asset_type import AssetType
from schemas.asset_type_schema import asset_type_schema, asset_types_schema
from datetime import date

asset_type = Blueprint('asset_type', __name__, url_prefix="/asset_type")

# The GET route endpoint - get all the asset_types
@asset_type.route("/", methods=["GET"])
def get_asset_types():
    # get all the assets from the database table
    asset_type_list = AssetType.query.all()
    # Convert the assets from the database into a JSON format and store them in result
    result = asset_types_schema.dump(asset_type_list)
    # return the data in JSON format
    return jsonify(result)

# The GET manufacturer routes endpoint - get details on one asset_type
@asset_type.route("/<int:id>/", methods=["GET"])
def get_asset_type(id):
    asset_type = AssetType.query.get(id)
    #return an error if the card doesn't exist
    if not asset_type:
        return abort(400, description= "employee does not exist")
    # Convert the cards from the database into a JSON format and store them in result
    result = asset_type_schema.dump(asset_type)
    # return the data in JSON format
    return jsonify(result)

# The POST route endpoint - add a asset_type
@asset_type.route("/", methods=["POST"])
def create_asset_type():
    #Create a new asset
    asset_fields = asset_type_schema.load(request.json)

    new_asset_type = AssetType()
    new_asset_type.description = asset_fields["description"]
    # not taken from the request, generated by the server
    new_asset_type.date = date.today()
    # add to the database and commit
    db.session.add(new_asset_type)
    db.session.commit()
    #return the asset in the response
    return jsonify(asset_type_schema.dump(new_asset_type))

# The PUT route endpoint - update asset_type
@asset_type.route("/<int:id>/", methods=["PUT"])
# @jwt_required()
def update_manufacturer(id):
    # #Create a new card
    asset_type_fields = asset_type_schema.load(request.json)

    #get the user id invoking get_jwt_identity
    # user_id = get_jwt_identity()
    #Find it in the db
    # user = User.query.get(user_id)
    # #Make sure it is in the database
    # if not user:
    #     return abort(401, description="Invalid user")
    # # Stop the request if the user is not an admin
    # if not user.admin:
    #     return abort(401, description="Unauthorised user")
    # # find the card
    asset_type = AssetType.query.filter_by(id=id).first()
    # #return an error if the card doesn't exist
    # if not card:
    #     return abort(400, description= "Card does not exist")
    #update the car details with the given values
    asset_type.description = asset_type_fields["description"]
    asset_type.date = date.today()
    # add to the database and commit
    db.session.commit()
    #return the card in the response
    return jsonify(asset_type_schema.dump(asset_type))

# delete a asset
@asset_type.route("/<int:id>/", methods=["DELETE"])
def delete_asset_type(id):
    # #get the user id invoking get_jwt_identity
    # user_id = get_jwt_identity()
    # #Find it in the db
    # user = User.query.get(user_id)
    # #Make sure it is in the database
    # if not user:
    #     return abort(401, description="Invalid user")
    # # Stop the request if the user is not an admin
    # if not user.admin:
    #     return abort(401, description="Unauthorised user")
    # # find the card
    asset_type = AssetType.query.filter_by(id=id).first()
    # #return an error if the card doesn't exist
    # if not Card:
    #     return abort(400, description= "Card doesn't exist")
    # #Delete the card from the database and commit
    db.session.delete(asset_type)
    db.session.commit()
    #return the card in the response
    return jsonify(asset_type_schema.dump(asset_type))
   